use strict;
use warnings;
use PDL::Types qw(ppdefs ppdefs_complex types);
my $R = [ppdefs()];
my $F = [map $_->ppsym, grep $_->real && !$_->integer, types()];
my $C = [ppdefs_complex()];

pp_core_importList('()');
pp_beginwrap; # required for overload to work

# pp_def functions go into the PDL::Complex namespace
# to avoid clashing with PDL::FFTW funcs of the same name that go
# into the PDL namespace
# it should be of no effect to the user of the module but you
# never know....
pp_bless('PDL::Complex');

pp_addpm {At => 'Top'}, <<'EOD';
use strict;
use warnings;
use Carp;
our $VERSION = '2.010';

=encoding utf8

=head1 NAME

PDL::Complex - handle complex numbers (DEPRECATED - use native complex)

=head1 SYNOPSIS

  use PDL;
  use PDL::Complex;

=head1 DESCRIPTION

This module is deprecated in favour of using "native complex" data types, e.g.:

  use PDL;
  my $complex_pdl = cdouble('[1+3i]');
  print $complex_pdl * pdl('i'); # [-3+i]

This module features a growing number of functions manipulating complex
numbers. These are usually represented as a pair C<[ real imag ]> or
C<[ magnitude phase ]>. If not explicitly mentioned, the functions can work
inplace (not yet implemented!!!) and require rectangular form.

While there is a procedural interface available (C<< $x/$y*$c <=> Cmul
(Cdiv ($x, $y), $c) >>), you can also opt to cast your pdl's into the
C<PDL::Complex> datatype, which works just like your normal ndarrays, but
with all the normal perl operators overloaded.

The latter means that C<sin($x) + $y/$c> will be evaluated using the
normal rules of complex numbers, while other pdl functions (like C<max>)
just treat the ndarray as a real-valued ndarray with a lowest dimension of
size 2, so C<max> will return the maximum of all real and imaginary parts,
not the "highest" (for some definition)

=head2 Native complex support

2.027 added changes in complex number handling, with support for C99
complex floating-point types, and most functions and modules in the core
distribution support these as well.

PDL can now handle complex numbers natively as scalars. This has
the advantage that real and complex valued ndarrays have the same
dimensions. Consider this when writing code in the future.

See L<PDL::Ops/re>, L<PDL::Ops/im>, L<PDL::Ops/abs>, L<PDL::Ops/carg>,
L<PDL::Ops/conj> for more.

=head1 TIPS, TRICKS & CAVEATS

=over 4

=item *

C<i> is a function (not, as of 2.047, a constant) exported by this module,
which represents C<-1**0.5>, i.e. the imaginary unit. it can be used to
quickly and conveniently write complex constants like this: C<4+3*i>.

B<NB> This will override the PDL::Core function of the same name, which
returns a native complex value.

=item *

Use C<r2C(real-values)> to convert from real to complex, as in C<$r
= Cpow $cplx, r2C 2>. The overloaded operators automatically do that for
you, all the other functions, do not. So C<Croots 1, 5> will return all
the fifths roots of 1+1*i (due to broadcasting).

=item *

use C<cplx(real-valued-ndarray)> to cast from normal ndarrays into the
complex datatype. Use C<real(complex-valued-ndarray)> to cast back. This
requires a copy, though.

=back

=head1 EXAMPLE WALK-THROUGH

The complex constant five is equal to C<pdl(1,0)>:

   pdl> p $x = r2C 5
   5 +0i

Now calculate the three cubic roots of five:

   pdl> p $r = Croots $x, 3
   [1.70998 +0i  -0.854988 +1.48088i  -0.854988 -1.48088i]

Check that these really are the roots:

   pdl> p $r ** 3
   [5 +0i  5 -1.22465e-15i  5 -7.65714e-15i]

Duh! Could be better. Now try by multiplying C<$r> three times with itself:

   pdl> p $r*$r*$r
   [5 +0i  5 -4.72647e-15i  5 -7.53694e-15i]

Well... maybe C<Cpow> (which is used by the C<**> operator) isn't as
bad as I thought. Now multiply by C<i> and negate, then take the complex
conjugate, which is just a very expensive way of swapping real and
imaginary parts.

   pdl> p Cconj(-($r*i))
   [0 +1.70998i  1.48088 -0.854988i  -1.48088 -0.854988i]

Now plot the magnitude of (part of) the complex sine. First generate the
coefficients:

   pdl> $sin = i * zeroes(50)->xlinvals(2,4) + zeroes(50)->xlinvals(0,7)

Now plot the imaginary part, the real part and the magnitude of the sine
into the same diagram:

   pdl> use PDL::Graphics::Gnuplot
   pdl> gplot( with => 'lines',
              PDL::cat(im ( sin $sin ),
                       re ( sin $sin ),
                       abs( sin $sin ) ))

An ASCII version of this plot looks like this:

  30 ++-----+------+------+------+------+------+------+------+------+-----++
     +      +      +      +      +      +      +      +      +      +      +
     |                                                                   $$|
     |                                                                  $  |
  25 ++                                                               $$  ++
     |                                                              ***    |
     |                                                            **   *** |
     |                                                         $$*        *|
  20 ++                                                       $**         ++
     |                                                     $$$*           #|
     |                                                  $$$   *          # |
     |                                                $$     *           # |
  15 ++                                            $$$       *          # ++
     |                                          $$$        **           #  |
     |                                      $$$$          *            #   |
     |                                  $$$$              *            #   |
  10 ++                            $$$$$                 *            #   ++
     |                        $$$$$                     *             #    |
     |                 $$$$$$$                         *             #     |
   5 ++       $$$############                          *             #    ++
     |*****$$$###            ###                      *             #      |
     *    #*****                #                     *             #      |
     | ###      ***              ###                **              #      |
   0 ##            ***              #              *               #      ++
     |                *              #             *              #        |
     |                 ***            #          **               #        |
     |                    *            #        *                #         |
  -5 ++                    **           #      *                 #        ++
     |                       ***         ##  **                 #          |
     |                          *          #*                  #           |
     |                           ****    ***##                #            |
 -10 ++                              ****     #              #            ++
     |                                         #             #             |
     |                                          ##         ##              |
     +      +      +      +      +      +      +  ### + ###  +      +      +
 -15 ++-----+------+------+------+------+------+-----###-----+------+-----++
     0      5      10     15     20     25     30     35     40     45     50


=head1 OPERATORS

The following operators are overloaded:

=over 4

=item +, += (addition)

=item -, -= (subtraction)

=item *, *= (multiplication; L</Cmul>)

=item /, /= (division; L</Cdiv>)

=item **, **= (exponentiation; L</Cpow>)

=item atan2 (4-quadrant arc tangent)

=item sin (L</Csin>)

=item cos (L</Ccos>)

=item exp (L</Cexp>)

=item abs (L</Cabs>)

=item log (L</Clog>)

=item sqrt (L</Csqrt>)

=item ++, -- (increment, decrement; they affect the real part of the complex number only)

=item "" (stringification)

=back

Comparing complex numbers other than for equality is a fatal error.

=cut

my $i;
BEGIN { $i = bless PDL->pdl(0,1) }
{
no warnings 'redefine';
sub i { $i->copy + (@_ ? $_[0] : 0) };
}

# sensible aliases from PDL::LinearAlgebra
*r2p = \&Cr2p;
*p2r = \&Cp2r;
*conj = \&Cconj;
*abs = \&Cabs;
*abs2 = \&Cabs2;
*arg = \&Carg;
*tan = \&Ctan;
*proj = \&Cproj;
*asin = \&Casin;
*acos = \&Cacos;
*atan = \&Catan;
*sinh = \&Csinh;
*cosh = \&Ccosh;
*tanh = \&Ctanh;
*asinh = \&Casinh;
*acosh = \&Cacosh;
*atanh = \&Catanh;
*tricpy = \&Ctricpy;
*mstack = \&Cmstack;
*augment = \&Caugment;
EOD

for (qw(Ctan Catan re im i cplx real)) {
   pp_add_exported '', $_;
}

pp_addhdr <<'EOH';

#include <math.h>

#ifndef M_PI
# define M_PI   3.1415926535897932384626433832795029
#endif
#ifndef M_2PI
# define M_2PI  (2. * M_PI)
#endif

#if __GLIBC__ > 1 && (defined __USE_MISC || defined __USE_XOPEN || defined __USE_ISOC9X)
# define CABS(r,i) hypot (r, i)
#else
  static double
  CABS (double r, double i)
  {
    double t;

    if (r < 0) r = - r;
    if (i < 0) i = - i;

    if (i > r)
      {
        t = r; r = i; i = t;
      }

    if (r + i == r)
      return r;

    t = i / r;
    return r * sqrt (1 + t*t);
  }
#endif

#if __GLIBC__ >= 2 && __GLIBC_MINOR__ >= 1 && defined __USE_GNU
# define SINCOS(x,s,c) sincos ((x), &(s), &(c))
#else
# define SINCOS(x,s,c)                  \
        (s) = sin (x);                  \
        (c) = cos (x);
#endif


#define CSQRT(type,ar,ai,cr,ci) 		\
        type mag = CABS ((ar), (ai));		\
        type t;					\
                                                \
        if (mag == 0)				\
          (cr) = (ci) = 0;			\
        else if ((ar) > 0)			\
          {					\
            t = sqrt (0.5 * (mag + (ar)));	\
            (cr) = t;				\
            (ci) = 0.5 * (ai) / t;		\
          }					\
        else					\
          {					\
            t = sqrt (0.5 * (mag - (ar)));	\
                                                \
            if ((ai) < 0)			\
              t = -t;				\
                                                \
            (cr) = 0.5 * (ai) / t;		\
            (ci) = t;				\
          }


#define CLOG(ar,ai,cr,ci)			\
        (cr) = log (CABS ((ar), (ai)));		\
        (ci) = atan2 ((ai), (ar));

EOH

pp_addpm <<'EOP';

=head2 from_native

=for ref

Class method to convert a native-complex ndarray to a PDL::Complex object.

=for usage

 PDL::Complex->from_native($native_complex_ndarray)

=cut

sub from_native {
  my ($class, $ndarray) = @_;
  return $ndarray if UNIVERSAL::isa($ndarray,'PDL::Complex'); # NOOP if P:C
  croak "not an ndarray" if !UNIVERSAL::isa($ndarray,'PDL');
  croak "not a native complex ndarray" if $ndarray->type->real;
  bless PDL::append($ndarray->re->dummy(0),$ndarray->im->dummy(0)), $class;
}

=head2 as_native

=for ref

Object method to convert a PDL::Complex object to a native-complex ndarray.

=for usage

 $pdl_complex_obj->as_native

=cut

sub as_native {
  PDL::Ops::czip(map $_[0]->slice("($_)"), 0..1);
}

=head2 cplx

=for ref

Cast a real-valued ndarray to the complex datatype.

The first dimension of the ndarray must be of size 2. After this the
usual (complex) arithmetic operators are applied to this pdl, rather
than the normal elementwise pdl operators.  Dataflow to the complex
parent works. Use C<sever> on the result if you don't want this.

=for usage

 cplx($real_valued_pdl)

=head2 complex

=for ref

Cast a real-valued ndarray to the complex datatype I<without> dataflow
and I<inplace>.

Achieved by merely reblessing an ndarray. The first dimension of the
ndarray must be of size 2.

=for usage

 complex($real_valued_pdl)

=head2 real

=for ref

Cast a complex valued pdl back to the "normal" pdl datatype.

Afterwards the normal elementwise pdl operators are used in
operations. Dataflow to the real parent works. Use C<sever> on the
result if you don't want this.

=for usage

 real($cplx_valued_pdl)

=cut

sub cplx($) {
   return $_[0] if UNIVERSAL::isa($_[0],'PDL::Complex'); # NOOP if just ndarray
   croak "first dimsize must be 2" unless $_[0]->dims > 0 && $_[0]->dim(0) == 2;
   bless $_[0]->slice('');
}

sub complex($) {
   return $_[0] if UNIVERSAL::isa($_[0],'PDL::Complex'); # NOOP if just ndarray
   croak "first dimsize must be 2" unless $_[0]->dims > 0 && $_[0]->dim(0) == 2;
   bless $_[0];
}

*PDL::cplx = \&cplx;
*PDL::complex = \&complex;

sub real($) {
   return $_[0] unless UNIVERSAL::isa($_[0],'PDL::Complex'); # NOOP unless complex
   bless $_[0]->slice(''), 'PDL';
}

=head2 t

=for usage

 $pdl = $pdl->t(SCALAR(conj))
 conj : Conjugate Transpose = 1 | Transpose = 0, default = 0;

=for ref

Convenient function for transposing real or complex 2D array(s).
For complex data, if conj is true returns conjugate transposed array(s).
Supports broadcasting. Not exported.

Originally by Grégory Vanuxem.

=cut

sub t {
  my ($m, $conj) = @_;
  my $ndims = $m->dims;
  my $r = $ndims > 2 ? $m->xchg(1,2) :
    $ndims > 1 ? $m->dummy(1) :
    $m->dummy(1)->dummy(1);
  $conj ? $r->conj : $r;
}

EOP

pp_def 'r2C',
       Pars => 'r(); [o]c(m=2)',
       Doc => 'convert real to complex, assuming an imaginary part of zero',
       PMCode => << 'EOPM',

undef &PDL::r2C;
*PDL::r2C = \&PDL::Complex::r2C;
sub PDL::Complex::r2C {
  return $_[0] if UNIVERSAL::isa($_[0],'PDL::Complex');
  my $r = __PACKAGE__->initialize;
  &PDL::Complex::_r2C_int($_[0], $r);
  $r }

EOPM
       Code => q!
          $c(m=>0) = $r();
          $c(m=>1) = 0;
       !
;

pp_def 'i2C',
       Pars => 'r(); [o]c(m=2)',
       Doc => 'convert imaginary to complex, assuming a real part of zero',
       PMCode => 'undef &PDL::i2C; *PDL::i2C = \&PDL::Complex::i2C; sub PDL::Complex::i2C { my $r = __PACKAGE__->initialize; &PDL::Complex::_i2C_int($_[0], $r); $r }',
       Code => q!
          $c(m=>0) = 0;
          $c(m=>1) = $r();
       !
;

pp_def 'Cr2p',
       Pars => 'r(m=2); float+ [o]p(m=2)',
       Inplace => 1,
       Doc => 'convert complex numbers in rectangular form to polar (mod,arg) form. Works inplace',
       Code => q!
          $GENERIC() x = $r(m=>0);
          $GENERIC() y = $r(m=>1);
          $p(m=>0) = CABS (x, y);
          $p(m=>1) = atan2 (y, x);
       !
;

pp_def 'Cp2r',
       Pars => 'r(m=2); [o]p(m=2)',
       Inplace => 1,
       GenericTypes => $F,
       Doc => 'convert complex numbers in polar (mod,arg) form to rectangular form. Works inplace',
       Code => q!
          $GENERIC() m = $r(m=>0);
          $GENERIC() a = $r(m=>1);
          double s, c;

          SINCOS (a, s, c);
          $p(m=>0) = c * m;
          $p(m=>1) = s * m;
       !
;

pp_def 'Cadd', # this is here for a) completeness and b) not having to mess with PDL::Ops
	Pars => 'a(m=2); b(m=2); [o]c(m=2)',
        Doc => undef,
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $GENERIC() br = $b(m=>0), bi = $b(m=>1);
           $c(m=>0) = ar + br;
           $c(m=>1) = ai + bi;
        ^
;

pp_def 'Csub', # this is here for a) completeness and b) not having to mess with PDL::Ops
	Pars => 'a(m=2); b(m=2); [o]c(m=2)',
        Doc => undef,
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $GENERIC() br = $b(m=>0), bi = $b(m=>1);
           $c(m=>0) = ar - br;
           $c(m=>1) = ai - bi;
        ^
;

pp_def 'Cmul',
	Pars => 'a(m=2); b(m=2); [o]c(m=2)',
        Doc => 'complex multiplication',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $GENERIC() br = $b(m=>0), bi = $b(m=>1);
           $c(m=>0) = ar*br - ai*bi;
           $c(m=>1) = ar*bi + ai*br;
        ^
;

pp_def 'Cprodover',
	Pars => 'a(m=2,n); [o]c(m=2)',
        Doc => 'Project via product to N-1 dimension',
        Code => q^
	    $GENERIC() br, bi, cr, ci,tmp;
	    cr = $a(m=>0,n=>0);
	    ci = $a(m=>1,n=>0);
	    loop(n=1) %{
		   br = $a(m=>0);
		   bi = $a(m=>1);
		   tmp =  cr*bi + ci*br;
	           cr = cr*br - ci*bi;
	           ci = tmp;
	    %}
	    $c(m=>0) = cr;
	    $c(m=>1) = ci;
        ^
;

pp_def 'Cscale',
	Pars => 'a(m=2); b(); [o]c(m=2)',
        Doc => 'mixed complex/real multiplication',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $c(m=>0) = ar * $b();
           $c(m=>1) = ai * $b();
        ^
;

pp_def 'Cdiv',
	Pars => 'a(m=2); b(m=2); [o]c(m=2)',
        GenericTypes => $F,
        Doc => 'complex division',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $GENERIC() br = $b(m=>0), bi = $b(m=>1);

           if (fabsl (br) > fabsl (bi))
             {
               $GENERIC() tt = bi / br;
               $GENERIC() dn = br + tt * bi;
               $c(m=>0) = (ar + tt * ai) / dn;
               $c(m=>1) = (ai - tt * ar) / dn;
             }
           else
             {
               $GENERIC() tt = br / bi;
               $GENERIC() dn = br * tt + bi;
               $c(m=>0) = (ar * tt + ai) / dn;
               $c(m=>1) = (ai * tt - ar) / dn;
             }
        ^
;

pp_def 'Ceq',
	Pars => 'a(m=2); b(m=2); [o]c()',
        GenericTypes => $F,
        Doc => "=for ref\n\nComplex equality operator.",
        Code => q^
           $c() = (($a(m=>0) == $b(m=>0)) && ($a(m=>1) == $b(m=>1)));
        ^,
        PMCode => <<'EOF',
sub PDL::Complex::Ceq {
    my @args = !$_[2] ? @_[1,0] : @_[0,1];
    $args[1] = r2C($args[1]) if ref $args[1] ne __PACKAGE__;
    PDL::Complex::_Ceq_int($args[0], $args[1], my $r = PDL->null);
    $r;
}
EOF
;

pp_def 'Cconj',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        Doc => 'complex conjugation. Works inplace',
        Code => q^
           $c(m=>0) =  $a(m=>0);
           $c(m=>1) = -$a(m=>1);
        ^
;

pp_def 'Cabs',
	Pars => 'a(m=2); [o]c()',
        GenericTypes => $F,
        Doc => 'complex C<abs()> (also known as I<modulus>)',
        PMCode => q^sub PDL::Complex::Cabs($) {
           my $pdl= shift;
           my $abs = PDL->null;
           &PDL::Complex::_Cabs_int($pdl, $abs);
           $abs;
        }^,
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $c() = CABS (ar, ai);
        ^
;

pp_def 'Cabs2',
	Pars => 'a(m=2); [o]c()',
        Doc => 'complex squared C<abs()> (also known I<squared modulus>)',
        PMCode => q^sub PDL::Complex::Cabs2($) {
           my $pdl= shift;
           my $abs2 = PDL->null;
           &PDL::Complex::_Cabs2_int($pdl, $abs2);
           $abs2;
        }^,
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $c() = ar*ar + ai*ai;
        ^
;

pp_def 'Carg',
	Pars => 'a(m=2); [o]c()',
        GenericTypes => $F,
        Doc => 'complex argument function ("angle")',
        PMCode => q^sub PDL::Complex::Carg($) {
           my $pdl= shift;
           my $arg = PDL->null;
           &PDL::Complex::_Carg_int($pdl, $arg);
           $arg;
        }^,
        Code => q^
           $c() = atan2 ($a(m=>1), $a(m=>0));
        ^
;

pp_def 'Csin',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => '  sin (a) = 1/(2*i) * (exp (a*i) - exp (-a*i)). Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           double s, c;

           SINCOS (ar, s, c);
           $c(m=>0) = s * cosh (ai);
           $c(m=>1) = c * sinh (ai);
        ^
;

pp_def 'Ccos',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => '  cos (a) = 1/2 * (exp (a*i) + exp (-a*i)). Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           double s, c;

           SINCOS (ar, s, c);
           $c(m=>0) =   c * cosh (ai);
           $c(m=>1) = - s * sinh (ai);
        ^
;

pp_addpm <<'EOD';

=head2 Ctan

=for ref

Complex tangent

  tan (a) = -i * (exp (a*i) - exp (-a*i)) / (exp (a*i) + exp (-a*i))

Does not work inplace.

=cut

sub Ctan($) { Csin($_[0]) / Ccos($_[0]) }


EOD

pp_def 'Cexp',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => '  exp (a) = exp (real (a)) * (cos (imag (a)) + i * sin (imag (a))). Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $GENERIC() ex = exp (ar);
           double s, c;

           SINCOS (ai, s, c);
           $c(m=>0) = ex * c;
           $c(m=>1) = ex * s;
        ^
;

pp_def 'Clog',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => '  log (a) = log (cabs (a)) + i * carg (a). Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);

           CLOG (ar, ai, $c(m=>0), $c(m=>1));
        ^
;

pp_def 'Cpow',
	Pars => 'a(m=2); b(m=2); [o]c(m=2)',
	Inplace => ['a'],
        GenericTypes => $F,
        Doc => 'complex C<pow()> (C<**>-operator)',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $GENERIC() br = $b(m=>0), bi = $b(m=>1);

/* real ndarray (scalar or 1-ndarray) */
           if($PDL(b)->dims[0]==0)
             bi = 0;
           double logr, logi, x, y;
           double  s, c;

           if(ar == 0 && ai == 0){
             if(br == 0 && bi == 0) {
               $c(m=>0) = 1;
               $c(m=>1) = 0;
             }
             else {
               $c(m=>0) = 0;
               $c(m=>1) = 0;
             }
           }
           else {
             CLOG (ar, ai, logr, logi);
             x = exp (logr*br - logi*bi);
             y =      logr*bi + logi*br;

             SINCOS (y, s, c);

             $c(m=>0) = x * c;
             if(ai == 0 && bi == 0) $c(m=>1) = 0;
             else $c(m=>1) = x * s;
           }
        ^
;

pp_def 'Csqrt',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);

           CSQRT ($GENERIC(), ar, ai, $c(m=>0), $c(m=>1));
        ^
;

pp_def 'Casin',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);

           $GENERIC() t1 = sqrt ((ar+1)*(ar+1) + ai*ai);
           $GENERIC() t2 = sqrt ((ar-1)*(ar-1) + ai*ai);
           $GENERIC() alpha = (t1+t2)*0.5;
           $GENERIC() beta  = (t1-t2)*0.5;

           if      (alpha < 1) alpha = 1;
           if      (beta >  1) beta =  1;
           else if (beta < -1) beta = -1;

           $c(m=>0) =   atan2 (beta, sqrt (1-beta*beta));
           $c(m=>1) = - log (alpha + sqrt (alpha*alpha-1));
           if (ai > 0 || (ai == 0 && ar < -1))
              $c(m=>1) = - $c(m=>1);
        ^
;

pp_def 'Cacos',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);

           $GENERIC() t1 = sqrt ((ar+1)*(ar+1) + ai*ai);
           $GENERIC() t2 = sqrt ((ar-1)*(ar-1) + ai*ai);
           $GENERIC() alpha = (t1+t2)*0.5;
           $GENERIC() beta  = (t1-t2)*0.5;

           if      (alpha < 1) alpha = 1;
           if      (beta >  1) beta =  1;
           else if (beta < -1) beta = -1;

           $c(m=>0) = atan2 (sqrt (1-beta*beta), beta);
           $c(m=>1) = log (alpha + sqrt (alpha*alpha-1));
           if (ai > 0 || (ai == 0 && ar < -1))
              $c(m=>1) = - $c(m=>1);
        ^
;

pp_addpm <<'EOD';

=head2 Catan

=for ref

Return the complex C<atan()>.

Does not work inplace.

=cut

sub Catan($) {
   my $z = shift;
   Cmul Clog(Cdiv (PDL::Complex::i()+$z, PDL::Complex::i()-$z)), PDL->pdl(0, 0.5);
}

EOD

pp_def 'Csinh',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => '  sinh (a) = (exp (a) - exp (-a)) / 2. Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           double s, c;

           SINCOS (ai, s, c);
           $c(m=>0) = sinh (ar) * c;
           $c(m=>1) = cosh (ar) * s;
        ^
;

pp_def 'Ccosh',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => '  cosh (a) = (exp (a) + exp (-a)) / 2. Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           double s, c;

           SINCOS (ai, s, c);
           $c(m=>0) = cosh (ar) * c;
           $c(m=>1) = sinh (ar) * s;
        ^
;

pp_def 'Ctanh',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           double den;
           double s, c;

           SINCOS (2*ai, s, c);
           den = cosh (2*ar) + c;

           $c(m=>0) = sinh (2*ar) / den;
           $c(m=>1) = s           / den;
        ^
;

pp_def 'Casinh',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);
           $GENERIC() yr = (ar-ai) * (ar+ai) + 1;
           $GENERIC() yi = 2*ar*ai;

           CSQRT ($GENERIC(), yr, yi, yr, yi)

           yr += ar;
           yi += ai;

           CLOG (yr, yi, $c(m=>0), $c(m=>1));
        ^
;

pp_def 'Cacosh',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);

           $GENERIC() yr = (ar-ai) * (ar+ai) - 1;
           $GENERIC() yi = 2*ar*ai;

           CSQRT ($GENERIC(), yr, yi, yr, yi)

           yr += ar;
           yi += ai;

           CLOG (yr, yi, $c(m=>0), $c(m=>1));
        ^
;

pp_def 'Catanh',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);

           double i2 = ai*ai;
           double num = i2 + (1+ar) * (1+ar);
           double den = i2 + (1-ar) * (1-ar);

           $c(m=>0) = 0.25 * (log(num) - log(den));
           $c(m=>1) = 0.5 * atan2 (2*ai, 1 - ar*ar - i2);
        ^
;

pp_def 'Cproj',
	Pars => 'a(m=2); [o]c(m=2)',
	Inplace => 1,
        GenericTypes => $F,
        Doc => 'compute the projection of a complex number to the riemann sphere. Works inplace',
        Code => q^
           $GENERIC() ar = $a(m=>0), ai = $a(m=>1);

           double den = ar*ar + ai*ai + 1;

           $c(m=>0) = 2*ar / den;
           $c(m=>1) = 2*ai / den;
        ^
;

pp_def 'Croots',
	Pars => 'a(m=2); [o]c(m=2,n)',
        OtherPars => 'int n => n',
        GenericTypes => $F,
        Doc => 'Compute the C<n> roots of C<a>. C<n> must be a positive integer. The result will always be a complex type!',
        PMCode => q^sub PDL::Complex::Croots($$) {
           my ($pdl, $n) = @_;
           my $r = PDL->null;
           &PDL::Complex::_Croots_int($pdl, $r, $n);
           bless $r;
        }^,
        Code => q^
           double s, c;
           double ar = $a(m=>0), ai = $a(m=>1),
                  n1 = 1 / (double)$COMP(n),
                  rr = pow (CABS (ar, ai), n1), /* do not optimize the sqrt out of this expr! */
                  at = atan2 (ai, ar) * n1,
                  ti = M_2PI * n1;

           loop(n) %{
               SINCOS (at, s, c);

               $c(m=>0) = rr * c;
               $c(m=>1) = rr * s;

               at += ti;
            %}
        ^
;

pp_addpm <<'EOD';

=head2 re, im

Return the real or imaginary part of the complex number(s) given.

These are slicing operators, so data flow works. The real and
imaginary parts are returned as ndarrays (ref eq PDL).

=cut

sub re($) { $_[0]->slice("(0)") }
sub im($) { $_[0]->slice("(1)") }

{
no warnings 'redefine';
# if the argument does anything other than pass through 0-th dim, re-bless
sub slice :lvalue {
  my $first = ref $_[1] ? $_[1][0] : (split ',', $_[1])[0];
  my $class = ($first//'') =~ /^[:x]?$/i ? ref($_[0]) : 'PDL';
  my $ret = bless $_[0]->SUPER::slice(@_[1..$#_]), $class;
  $ret;
}
}

EOD

pp_def 'rCpolynomial',
       Pars => 'coeffs(n); x(c=2,m); [o]out(c=2,m)',
       Doc => 'evaluate the polynomial with (real) coefficients C<coeffs> at the (complex) position(s) C<x>. C<coeffs[0]> is the constant term.',
       GenericTypes => $F,
       PMCode=> q!
sub rCpolynomial {
    my $coeffs = shift;
    my $x = shift;
    my $out = $x->copy;
    _rCpolynomial_int($coeffs,$x,$out);
    return PDL::complex($out);
    }
!,
       Code => q!
          loop(m) %{
             double xr = 1;
             double xi = 0;
             double or = 0;
             double oi = 0;
             double Xr;
             loop(n) %{
                or += $coeffs() * xr;
                oi += $coeffs() * xi;
                Xr = xr;
                xr = Xr * $x(c=>0) - xi * $x(c=>1);
                xi = xi * $x(c=>0) + Xr * $x(c=>1);
             %}
             $out(c=>0) = or;
             $out(c=>1) = oi;
          %}
       !
;

pp_def('Ctricpy',
  Pars => 'A(c=2,m,n);[o] C(c=2,m,n)',
  OtherPars => 'int uplo',
  OtherParsDefaults => {uplo => 0},
  ArgOrder => [qw(A uplo C)],
  Code => '
if ($COMP(uplo)) { /* lower */
  broadcastloop %{ loop(n,m=:n+1,c) %{ $C() = $A(); %} %}
} else {
  broadcastloop %{ loop(n,m=n,c) %{ $C() = $A(); %} %}
}
  ',
  Doc => <<'EOT',
=for usage

tricpy(PDL(A), int(uplo), PDL(C))

=for example

  $c = $a->tricpy($uplo); # explicit uplo
  $c = $a->tricpy;        # default upper

or

  tricpy($a, $uplo, $c);  # modify c

=for ref

Copy triangular part to another matrix. If uplo == 0 copy upper triangular
part.

Originally by Grégory Vanuxem.
EOT
);

pp_def('Cmstack',
  DefaultFlow => 1,
  TwoWay => 1,
  Pars => 'x(c=2,n,m);y(c,n,p);[o]out(c,n,q=CALC($SIZE(m)+$SIZE(p)));',
  Code => '
loop (m,n,c) %{ $out(q=>m) = $x(); %}
loop (q=$SIZE(m),n,c) %{ $out() = $y(p=>q-$SIZE(m)); %}
',
  BackCode => '
loop (m,n,c) %{ $x() = $out(q=>m); %}
loop (q=$SIZE(m),n,c) %{ $y(p=>q-$SIZE(m)) = $out(); %}
',
  Doc => <<EOT
=for ref

Combine two 2D ndarrays into a single ndarray, along the second
("vertical") dim.
This routine does backward and forward dataflow automatically.

Originally by Grégory Vanuxem.
EOT
);

pp_def('Caugment',
  DefaultFlow => 1,
  TwoWay => 1,
  Pars => 'x(c=2,n);y(c,p);[o]out(c,q=CALC($SIZE(n)+$SIZE(p)));',
  Code => '
loop (q=:$SIZE(n),c) %{ $out() = $x(n=>q); %}
loop (q=$SIZE(n),c)  %{ $out() = $y(p=>q-$SIZE(n)); %}
',
  BackCode => '
loop (q=:$SIZE(n),c) %{ $x(n=>q)          = $out(); %}
loop (q=$SIZE(n),c)  %{ $y(p=>q-$SIZE(n)) = $out(); %}
',
  Doc => <<EOT
=for ref

Combine two ndarrays into a single ndarray along the 0-th ("horizontal") dim.
This routine does backward and forward dataflow automatically.

Originally by Grégory Vanuxem.
EOT
);

pp_add_isa 'PDL';

pp_addpm {At => 'Bot'}, <<'EOD';

# undocumented compatibility functions (thanks to Luis Mochan!)
sub Catan2 { Clog( $_[1] + i()*$_[0])/i }
sub atan2 { Clog( $_[1] + i()*$_[0])/i }

=begin comment

In _gen_biop, the '+' or '-' between the operator (e.g., '*') and the
function that it overloads (e.g., 'Cmul') flags whether the operation
is ('+') or is not ('-') commutative. See the discussion of argument
swapping in the section "Calling Conventions and Magic Autogeneration"
in "perldoc overload".

=end comment

=cut

my %NO_MUTATE; BEGIN { @NO_MUTATE{qw(atan2 .= ==)} = (); }
sub _gen_biop {
   local $_ = shift;
   my $sub;
   die if !(my ($op, $commutes, $func) = /(\S+)([-+])(\w+)/);
   $sub = eval 'sub {
      my ($x, $y) = '.($commutes eq '+' ? '' : '$_[2] ? @_[1,0] : ').'@_[0,1];
      $_ = r2C $_ for grep ref $_ ne __PACKAGE__, $x, $y;
      '.$func.'($x, $y);
   }'; #need to swap?
   die if $@;
   ($op, $sub, exists $NO_MUTATE{$op} ? () : ("$op=", $sub));
}

sub _gen_unop {
   my ($op, $func) = split '@', $_[0];
   no strict 'refs';
   *$op = \&$func if $op =~ /\w+/; # create an alias
   ($op, eval 'sub { '.$func.' $_[0] }');
}

sub initialize {
   # Bless a null PDL into the supplied 1st arg package
   #   If 1st arg is a ref, get the package from it
   bless PDL->null, ref($_[0]) || $_[0];
}

# so broadcasting doesn't also assign the real value into the imaginary
sub Cassgn {
    my @args = !$_[2] ? @_[1,0] : @_[0,1];
    $args[1] = r2C($args[1]) if ref $args[1] ne __PACKAGE__;
    PDL::Ops::assgn(@args);
    $args[1];
}

use overload
   (map _gen_biop($_), qw(++Cadd --Csub *+Cmul /-Cdiv **-Cpow atan2-Catan2 ==+Ceq .=-Cassgn)),
   (map _gen_unop($_), qw(sin@Csin cos@Ccos exp@Cexp abs@Cabs log@Clog sqrt@Csqrt)),
   (map +($_ => sub { confess "Can't compare complex numbers" }), qw(< > <= >=)),
   "!=" => sub { !($_[0] == $_[1]) },
   '""' => sub { $_[0]->isnull ? "PDL::Complex->null" : $_[0]->as_native->string },
;

sub sum {
  my($x) = @_;
  return $x if $x->dims==1;
  my $tmp = $x->mv(0,-1)->clump(-2)->mv(1,0)->sumover;
  return $tmp;
}

sub sumover{
  my $m = shift;
  PDL::Ufunc::sumover($m->transpose);
}

*PDL::Complex::Csumover=\&sumover; # define through alias

*PDL::Complex::prodover=\&Cprodover; # define through alias

sub prod {
  my($x) = @_;
  return $x if $x->dims==1;
  my $tmp = $x->mv(0,-1)->clump(-2)->mv(1,0)->prodover;
  return $tmp;
}

=head1 AUTHOR

Copyright (C) 2000 Marc Lehmann <pcg@goof.com>.
All rights reserved. There is no warranty. You are allowed
to redistribute this software / documentation as described
in the file COPYING in the PDL distribution.

=head1 SEE ALSO

perl(1), L<PDL>.

=cut
EOD

pp_done;

